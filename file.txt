#include <iostream>
#include <omp.h>
#include <queue>

using namespace std;

const int MAX_VERTICES = 5;

void DFSUtil(int v, int adj[][MAX_VERTICES], bool visited[]) {
    visited[v] = true;
    cout << v << " ";

    #pragma omp parallel for
    for (int i = 0; i < MAX_VERTICES; ++i) {
        if (adj[v][i] && !visited[i]) {
            DFSUtil(i, adj, visited);
        }
    }
}

void parallelDFS(int adj[][MAX_VERTICES]) {
    bool visited[MAX_VERTICES] = {false};

    #pragma omp parallel for
    for (int i = 0; i < MAX_VERTICES; ++i) {
        if (!visited[i]) {
            DFSUtil(i, adj, visited);
        }
    }
}

void parallelBFS(int adj[][MAX_VERTICES], int startVertex) 
{
    queue<int> q;
    bool visited[MAX_VERTICES] = {false};
    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) 
    {
        int currentVertex = q.front();
        q.pop();
        cout << currentVertex << " ";

#pragma omp parallel for
        for (int i = 0; i < MAX_VERTICES; ++i) {
            if (adj[currentVertex][i] && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int adj[MAX_VERTICES][MAX_VERTICES] = {
        {0, 1, 1, 0, 0},
        {0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0}
    };

    cout << "Depth First Traversal:\n";
    parallelBFS(adj,0);

    return 0;
}