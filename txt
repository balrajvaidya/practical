#include <iostream>
#include <queue>
#include <omp.h>

using namespace std;

const int MAX_VERTICES = 5;

void parallelBFS(int adj[][MAX_VERTICES], bool visited[], int startVertex) {
    queue<int> q;
    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        cout << currentVertex << " ";

#pragma omp parallel for
        for (int i = 0; i < MAX_VERTICES; ++i) {
            if (adj[currentVertex][i] && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int adj[MAX_VERTICES][MAX_VERTICES] = {
        {0, 1, 1, 0, 0},
        {0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0}
    };

    bool visited[MAX_VERTICES] = {false};

    cout << "Breadth First Traversal:
";
    parallelBFS(adj, visited, 0);

    return 0;
}